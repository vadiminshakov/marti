// Code generated by mockery v2.20.0. DO NOT EDIT.

package trader

import (
	"context"

	decimal "github.com/shopspring/decimal"

	mock "github.com/stretchr/testify/mock"
)

// Trader is an autogenerated mock type for the Trader interface
// located under mocks/trader. It is 100 % compatible with the previous
// internal/services/trader/mock implementation.
//
// NOTE: the file was moved from internal/services/trader/mock to
// mocks/trader to keep all mocks in a single root-level folder.
type Trader struct {
	mock.Mock
}

// Buy provides a mock function with given fields: ctx, amount
func (_m *Trader) Buy(ctx context.Context, amount decimal.Decimal) error {
	ret := _m.Called(ctx, amount)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, decimal.Decimal) error); ok {
		r0 = rf(ctx, amount)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Sell provides a mock function with given fields: ctx, amount
func (_m *Trader) Sell(ctx context.Context, amount decimal.Decimal) error {
	ret := _m.Called(ctx, amount)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, decimal.Decimal) error); ok {
		r0 = rf(ctx, amount)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewTrader interface {
	mock.TestingT
	Cleanup(func())
}

// NewTrader creates a new instance of Trader. It also registers a testing
// interface on the mock and a cleanup function to assert the mocks expectations.
func NewTrader(t mockConstructorTestingTNewTrader) *Trader {
	mockObj := &Trader{}
	mockObj.Mock.Test(t)

	t.Cleanup(func() { mockObj.AssertExpectations(t) })

	return mockObj
}
